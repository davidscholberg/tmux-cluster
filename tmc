#!/bin/bash

# Copyright 2015 David Scholberg <recombinant.vector@gmail.com>
#           2022 vincent Danjean <vincent.danjean@ens-lyon.org>

# This file is part of tmux-cluster.
#
# tmux-cluster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# tmux-cluster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tmux-cluster.  If not, see <http://www.gnu.org/licenses/>.

set -e

# define newline var, per http://stackoverflow.com/a/9403076
NL='
'

# error codes
ERR_DEPENDENCY=1
ERR_CONFIG=2
ERR_ARG=3

usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS] [CLUSTERNAME]

Options:
    -h              Display help message and quit.
    -d              Dump space-separated list of hosts in CLUSTERNAME.
                        Conflicts with -t option.
    -t              Dump generated list of tmux commands.
                        Conflicts with -d option.
    -c CLUSTERLINE  Create custom cluster
                        CLUSTERLINE is treated as a clusters config line.
                        This option conflicts with passing CLUSTERNAME.
                        The name used for the cluster must not exist in the
                            clusters config.
    -x EXCLUDES     Space-separated list of hosts to exclude from cluster.
                        The hosts in EXCLUDES will not be connected to.
    -w              Create cluster panes in a new window in the current session.
                        Only valid if used in an attached tmux session.
EOF
}

CONFDIR="$HOME/.clusterssh"

declare -A CLUSTERS
NB_CLUSTERS=0

# get the cluster id (if existing)
cluster-getid() {
    local cname="$1" cid
    cid="${CLUSTERS[$cname]}"
    echo "$cid"
}

# define a cluster id if none already existing
cluster-define() {
    local cname="$1" cid cvar
    cid="$(cluster-getid "$cname")"
    if [ -z "$cid" ]; then
        cid="$NB_CLUSTERS"
        NB_CLUSTERS=$(($NB_CLUSTERS + 1))
        CLUSTERS[$cname]="$cid"
        cvar="$(cid-var "$cid")"
        eval declare -a $cvar
    fi
}

# get internal variable name for a given cluster id
cid-var() {
    local cid="$1"
    echo "_CLUSTER_$cid"
}

# add host(s) to a cluster (defined by its id)
cid-add() {
    local cid="$1"
    shift
    local cvar="$(cid-var "$cid")"
    eval $cvar'+=("$@")'
}

# get all hosts (space separated) of clusters (or direct hosts)
# The result is a flatten hosts list (sub-clusters are recursed)
cluster-get-hosts() {
    local cid cvar
    local -a cluster_or_hosts_to_add=( "$@" )
    local -a hosts
    local -A handled
    while [ ${#cluster_or_hosts_to_add[@]} != 0 ]; do
        local -a to_handle=( "${cluster_or_hosts_to_add[@]}" )
        cluster_or_hosts_to_add=()
        for host in "${to_handle[@]}"; do
            if [ -n "${handled["$host"]}" ]; then
                continue
            fi
            cid=$(cluster-getid "$host")
            if [ -z "$cid" ]; then
                hosts+=( "$host" )
                handled["$host"]="$host"
            else
                cvar="$(cid-var "$cid")"
                eval 'cluster_or_hosts_to_add+=( "${'"$cvar"'[@]}" )'
            fi
        done
    done
    echo "${hosts[@]}"
}

# define a new cluster from a line
# (i.e. 'clustername host1 host2 ...')
cluster-define-from-line() {
    local cname chosts cid
    while read cname chosts; do
        cluster-define "$cname"
        cid=$(cluster-getid "$cname")
        cid-add "$cid" $chosts
    done < <(echo "$1")
}

# Read clusterssh config
# Both 'clusters' and 'tags' files are taken into account
# Clusters are put as key in the global CLUSTERS associative array.
# The value is the cluster id that will be used to find the name of
# the variable (array) that contains the hosts (or sub-clusters)
read_cssh_config() {
    local cname chosts cid
    if [ -f "$CONFDIR/clusters" ]; then
        while read cname chosts; do
            cluster-define-from-line "$cname $chosts"
        done < <(grep -E -v '^ *([#].*)?$' "$CONFDIR/clusters")
    fi
    local host cnames
    if [ -f "$CONFDIR/tags" ]; then
        while read host cnames; do
            for cname in $cnames; do
                cluster-define "$cname"
                cid=$(cluster-getid "$cname")
                cid-add "$cid" $host
            done
        done < <(grep -E -v '^ *([#].*)?$' "$CONFDIR/tags")
    fi
}

# for debug, not used
dump_config() {
    local nb=0 cname cid cvar
    echo "#clusters: $NB_CLUSTERS"
    for cname in "${!CLUSTERS[@]}" ; do
        cid="$(cluster-getid "$cname")"
        echo "Cluster '$cname' (with id=$cid)"
        cvar="$(cid-var "$cid")"
        eval echo '"  ${'"$cvar"'[@]}"'
    done
}

# get dimensions of current tmux window
get_current_tmux_window_dimesions() {
    echo "$(tmux list-windows | grep -E '[0-9]+: \w+\*' | sed -r 's/^.+\[([0-9]+x[0-9]+)\].+$/\1/')"
}

# check if tmux is in PATH
if [ -z "$(which tmux)" ]; then
    echo "error: tmux not found in path: $PATH" 1>&2
    exit "$ERR_DEPENDENCY"
fi

DUMP_HOSTS=""
DUMP_TMUX_CMDS=""
CUSTOM_CLUSTER_LINE=""
EXCLUDED_HOSTS=""
USE_EXISTING_SESSION=""

# parse args
while getopts :hdtc:x:w OPT; do
    case $OPT in
        h)
            usage
            exit
            ;;
        d)
            DUMP_HOSTS="true"
            ;;
        t)
            DUMP_TMUX_CMDS="true"
            ;;
        c)
            CUSTOM_CLUSTER_LINE="$OPTARG"
            ;;
        x)
            EXCLUDED_HOSTS="$OPTARG"
            ;;
        w)
            USE_EXISTING_SESSION="true"
            ;;
        \?)
            echo "error: invalid option -$OPTARG" 1>&2
            usage 1>&2
            exit "$ERR_ARG"
            ;;
        :)
            echo "error: missing argument for option -$OPTARG" 1>&2
            usage 1>&2
            exit "$ERR_ARG"
            ;;
    esac
done

shift $((OPTIND-1))

# if -w option is used, make sure we're in tmux
if [ "$USE_EXISTING_SESSION" = "true" -a -z "$TMUX" ]; then
    MSG="error: -w option must be used in an attached tmux session"
    echo "$MSG" 1>&2
    usage 1>&2
    exit "$ERR_ARG"
fi

# check for conficting dump options
if [ -n "$DUMP_HOSTS" -a -n "$DUMP_TMUX_CMDS" ]; then
    echo "error: -d and -t options conflict" 1>&2
    usage 1>&2
    exit "$ERR_ARG"
fi

# check for conf directory or custom cluster option
if [ ! -d "$CONFDIR" -a -z "$CUSTOM_CLUSTER_LINE" ]; then
    echo "error: either config in $CONFDIR must exist or -c option must be used" 1>&2
    usage 1>&2
    exit "$ERR_ARG"
fi

read_cssh_config

if [ -n "$CUSTOM_CLUSTER_LINE" ]; then
    # check for first param
    if [ -n "$1" ]; then
        echo "error: passing CLUSTERNAME conflicts with -c option" 1>&2
        usage 1>&2
        exit "$ERR_ARG"
    fi

    # get cluster name
    CLUSTER="$(echo "$CUSTOM_CLUSTER_LINE" | awk '{print $1}')"

    # check conf for existing cluster of the same name
    if [ -n "$(cluster-getid "$CLUSTER")" ]; then
        echo "error: cluster $CLUSTER specified with -c option exists in config from $CONFDIR" 1>&2
        usage 1>&2
        exit "$ERR_ARG"
    fi

    # define the cluster from user parameter
    cluster-define-from-line "$CUSTOM_CLUSTER_LINE"

    # use this cluster
    set -- "$CLUSTER"
else
    # check for first param
    if [ -z "$1" ]; then
        usage 1>&2
        exit "$ERR_ARG"
    fi

    CLUSTER="$1"
fi

SESSION_NAME=""
# set session name
if [ -z "$USE_EXISTING_SESSION" ]; then
    SESSION_NAME="cluster-$CLUSTER"

    # check for existing tmux session of the specified cluster
    if [ -z "$DUMP_HOSTS" -a -z "$DUMP_TMUX_CMDS" ]; then
        # TODO: update to use has-session tmux command
        if [ -n "$(tmux ls 2>/dev/null | grep "$SESSION_NAME:")" ]; then
            echo "error: tmux session $SESSION_NAME already exists" 1>&2
            exit "$ERR_ARG"
        fi
    fi
fi

# get hosts from cluster
declare -a ALL_HOSTS=( $(cluster-get-hosts "$@") )
declare -A ALL_HOSTS2
for HOST in "${ALL_HOSTS[@]}"; do
    ALL_HOSTS2["$HOST"]="$HOST"
done

# exclude hosts (or clusters)
if [ -n "$EXCLUDED_HOSTS" ]; then
    for HOST in $(cluster-get-hosts $EXCLUDED_HOSTS); do
        unset ALL_HOSTS2["$HOST"]
    done
fi

declare -a HOST
for HOST in "${ALL_HOSTS[@]}"; do
    if [ -n "${ALL_HOSTS2["$HOST"]}" ]; then
        HOSTS+=("$HOST")
    fi
done

# dump hosts
if [ -n "$DUMP_HOSTS" ]; then
    echo "${HOSTS[@]}"
    exit
fi

# build tmux commands
# get first host
HOST="${HOSTS[0]}"
# remove first host
unset HOSTS[0]

SHELL_CMD="ssh $HOST; [ \$? -eq 255 ] && (echo Press ENTER to close pane; read enter)"

# if we're running in tmux, get dimensions of the current window
# this is needed if tmc is run inside run-shell, since the default window size is 80x24
TMUX_WINDOW_XY_ARGS=""
if [ -n "$TMUX" ]; then
    TMUX_DIMENSIONS="$(get_current_tmux_window_dimesions)"
    TMUX_WINDOW_X="$(echo "$TMUX_DIMENSIONS" | cut -f 1 -d 'x')"
    TMUX_WINDOW_Y="$(echo "$TMUX_DIMENSIONS" | cut -f 2 -d 'x')"
    TMUX_WINDOW_XY_ARGS="-x $TMUX_WINDOW_X -y $TMUX_WINDOW_Y"
fi

TMUX_SESSION_S_ARG=""
TMUX_SESSION_T_ARG=""
if [ "$USE_EXISTING_SESSION" = "true" ]; then
    TMUX_CMDS="neww \"$SHELL_CMD\"$NL"
else
    TMUX_SESSION_S_ARG="-s \"$SESSION_NAME\""
    TMUX_SESSION_T_ARG="-t \"$SESSION_NAME\""
    TMUX_CMDS="new -d $TMUX_WINDOW_XY_ARGS $TMUX_SESSION_S_ARG \"$SHELL_CMD\"$NL"
fi

for HOST in "${HOSTS[@]}"; do
    SHELL_CMD="ssh $HOST; [ \$? -eq 255 ] && (echo Press ENTER to close pane; read enter)"
    TMUX_CMDS="${TMUX_CMDS}splitw $TMUX_SESSION_T_ARG \"$SHELL_CMD\"$NL"
    TMUX_CMDS="${TMUX_CMDS}select-layout $TMUX_SESSION_T_ARG tiled$NL"
done

TMUX_CMDS="${TMUX_CMDS}set-window-option $TMUX_SESSION_T_ARG synchronize-panes on$NL"

# if we're inside a tmux client, switch-client, else attach
if [ -n "$TMUX" ]; then
    # only switch client if we created a new session
    # if using an existing session, we're already in the new window
    if [ -z "$USE_EXISTING_SESSION" ]; then
        TMUX_CMDS="${TMUX_CMDS}switch-client $TMUX_SESSION_T_ARG$NL"
    fi
else
    TMUX_CMDS="${TMUX_CMDS}attach $TMUX_SESSION_T_ARG$NL"
fi

# fix issue with incorrect layout after call to switch-client
TMUX_CMDS="${TMUX_CMDS}select-layout $TMUX_SESSION_T_ARG tiled$NL"

# dump tmux commands
if [ -n "$DUMP_TMUX_CMDS" ]; then
    echo -n "$TMUX_CMDS"
    exit
fi

TMPFILE="$(mktemp /tmp/tmux-cluster-XXXXXXXXXXXX)"

echo "$TMUX_CMDS" > "$TMPFILE"
tmux start-server \; source-file "$TMPFILE"
rm "$TMPFILE"
